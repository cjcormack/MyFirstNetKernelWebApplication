apply plugin: 'netkernel'

nkRepositories {
  packageDownloadStore = 'external/packages'

  defineRepository (baseUrl: 'http://apposite.netkernel.org/repo',
                    path:    '1060-NetKernel-SE/4.1.1',
                    set:     'main')
  defineRepository (baseUrl: 'http://www.netkernelroc.org/repositoryServer',
                    path:    'stable',
                    set:     'main')

  definePackage    (name: 'xml-saxon')
  definePackage    (name: 'netkernelroc-liquibase')
  definePackage    (name: 'netkernelroc-layer2')
}

boolean isNetKernelRunning() {
  try {
    def hostname = "localhost:1060"
    def nkControlPanel = "panel/urn:org:netkernel:nkse:control:panel:home"
    def url = new URL("http://${hostname}/${nkControlPanel}")
    def connection = url.openConnection()
    
    return (connection.getResponseCode() == 200)
  } catch (Exception e) {
    return false
  }
}

boolean isNetKernelInstalled() {
  return new File(netKernelInstallPath).exists()
}

void doNetKernelInstall() {
  File nkJar = new File("external/1060-NetKernel-EE.jar")
  
  javaexec {
    main = "-jar"
    args = [ relativePath(nkJar) ]
    systemProperties = [ "unattended.install.directory": new File(netKernelInstallPath),
                         "unattended.install.expand": true ]
  }
}

void registerModule(File moduleFile) {
  def moduleName = moduleFile.toURI().toASCIIString()
  def modulesFile = new File(netKernelInstallPath, "etc/modules.xml")
  def slurper = new XmlSlurper()
  slurper.setKeepWhitespace(true)
  def modules = slurper.parse(modulesFile)
  def existingModule = modules.module.find { it == moduleName }
  if (!existingModule) {
    modules.appendNode {
      module(moduleName, runLevel: "7")
    }
    def builder = new groovy.xml.StreamingMarkupBuilder()
    String built = builder.bind { mkp.yield modules }
    modulesFile.write(built)
  }
}

task installNetKernel << {
  if (isNetKernelInstalled()) {
    println "NetKernel is already installed"
  } else {
    doNetKernelInstall()
  }
}

task registerModules(dependsOn: installNetKernel) << {
  registerModule(new File("external/urn.org.netkernelroc.mod.liquibase.jar"))
}

task runNetKernel(dependsOn: registerModules) << {
  if (isNetKernelRunning()) {
    println "NetKernel is already running"
  } else {
    exec {
      commandLine = [new File(netKernelInstallPath, "bin/netkernel.sh")]
    }
  }
}